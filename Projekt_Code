#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SONGS 1000

struct song {
    char titel[1000];
    char kuenstler[1000];
    char album[1000];
    char jahr[50];
};

struct MusikBibliothek {
    struct song songs[MAX_SONGS];
    int songAnzahl;
};

void bibliothekLaden(struct MusikBibliothek *musikBibliothek, const char *dateiPfad) {
    FILE *datei = fopen(dateiPfad, "r");
    if (datei != NULL) {
        fscanf(datei, "%s", musikBibliothek->songs[0].titel);
        printf("Bibliothek geladen.\n");
        fclose(datei);
    } else {
        printf("Keine Bibliothek gefunden. Eine neue wird erstellt.\n");
    }
}

void bibliothekSpeichern(const struct MusikBibliothek *musikBibliothek, const char *dateiPfad) {
    FILE *datei = fopen(dateiPfad, "w");
    if (datei != NULL) {
        fprintf(datei, "%s", musikBibliothek->songs[0].titel);
        printf("Bibliothek gespeichert.\n");
        fclose(datei);
    }
}

void songHinzufuegen(struct MusikBibliothek *musikBibliothek) {
    struct song songs;
    printf("Liedinformationen eingeben:\n");
    printf("Titel: ");
    scanf("%s", songs.titel);
    printf("Künstler: ");
    scanf("%s", songs.kuenstler);
    printf("Album: ");
    scanf("%s", songs.album);
    printf("Jahr: ");
    scanf("%s", songs.jahr);

    if (musikBibliothek->songAnzahl < MAX_SONGS) {
        musikBibliothek->songs[musikBibliothek->songAnzahl++] = songs;
        printf("Lied hinzugefügt.\n");
    } else {
        printf("Maximale Liedanzahl erreicht.\n");
    }
}

void songBearbeiten(struct MusikBibliothek *musikBibliothek) {
    char bearbeitenTitel[100], feld[100], neuerWert[100];
    printf("Titel des zu bearbeitenden Lieds eingeben: ");
    scanf("%s", bearbeitenTitel);

    for (int i = 0; i < musikBibliothek->songAnzahl; ++i) {
        if (strcmp(musikBibliothek->songs[i].titel, bearbeitenTitel) == 0) {
            printf("Zu bearbeitendes Feld eingeben (titel/kuenstler/album/jahr): ");
            scanf("%s", feld);
            printf("Neuer Wert eingeben: ");
            scanf("%s", neuerWert);

            if (strcmp(feld, "titel") == 0) {
                strcpy(musikBibliothek->songs[i].titel, neuerWert);
            } else if (strcmp(feld, "kuenstler") == 0) {
                strcpy(musikBibliothek->songs[i].kuenstler, neuerWert);
            } else if (strcmp(feld, "album") == 0) {
                strcpy(musikBibliothek->songs[i].album, neuerWert);
            } else if (strcmp(feld, "jahr") == 0) {
                strcpy(musikBibliothek->songs[i].jahr, neuerWert);
            }

            printf("Liedinformationen aktualisiert.\n");
            return;
        }
    }
    printf("Lied nicht gefunden.\n");
}

void songLoeschen(struct MusikBibliothek *musikBibliothek) {
    char loeschenTitel[100];
    printf("Titel des zu löschenden Lieds eingeben: ");
    scanf("%s", loeschenTitel);

    for (int i = 0; i < musikBibliothek->songAnzahl; ++i) {
        if (strcmp(musikBibliothek->songs[i].titel, loeschenTitel) == 0) {
            for (int j = i; j < musikBibliothek->songAnzahl - 1; ++j) {
                musikBibliothek->songs[j] = musikBibliothek->songs[j + 1];
            }
            --musikBibliothek->songAnzahl;
            printf("Lied gelöscht.\n");
            return;
        }
    }
    printf("Lied nicht gefunden.\n");
}

void bibliothekDurchsuchen(const struct MusikBibliothek *musikBibliothek) {
    char suchbegriff[100];
    printf("Suchbegriff eingeben: ");
    scanf("%s", suchbegriff);

    int gefunden = 0;
    printf("Suchergebnisse:\n");
    for (int i = 0; i < musikBibliothek->songAnzahl; ++i) {
        if (strstr(musikBibliothek->songs[i].titel, suchbegriff) != NULL) {
            printf("Titel: %s, Künstler: %s, Album: %s, Jahr: %s\n",
                   musikBibliothek->songs[i].titel,
                   musikBibliothek->songs[i].kuenstler,
                   musikBibliothek->songs[i].album,
                   musikBibliothek->songs[i].jahr);
            gefunden = 1;
        }
    }

    if (!gefunden) {
        printf("Keine Ergebnisse gefunden.\n");
    }
}

int main() {
    struct MusikBibliothek musikBib;
    musikBib.songAnzahl = 0;
    const char *dateiPfad = "musik_bib.txt";

    while (1) {
        printf("\n=== Musikbibliothek verwalten ===\n");
        printf("1. Bibliothek laden\n");
        printf("2. Bibliothek speichern\n");
        printf("3. Song hinzufügen\n");
        printf("4. Metadaten bearbeiten\n");
        printf("5. Song löschen\n");
        printf("6. Bibliothek durchsuchen\n");
        printf("7. Beenden\n");

        int auswahl;
        printf("Option auswählen (1-7): ");
        scanf("%d", &auswahl);

        switch (auswahl) {
            case 1:
                bibliothekLaden(&musikBib, dateiPfad);
                break;
            case 2:
                bibliothekSpeichern(&musikBib, dateiPfad);
                break;
            case 3:
                songHinzufuegen(&musikBib);
                break;
            case 4:
                songBearbeiten(&musikBib);
                break;
            case 5:
                songLoeschen(&musikBib);
                break;
            case 6:
                bibliothekDurchsuchen(&musikBib);
                break;
            case 7:
                printf("Programm wird beendet.\n");
                return 0;
            default:
                printf("Ungültige Auswahl. Bitte erneut versuchen.\n");
        }
    }

    return 0;
}
