#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SONGS 100

struct Song {
    char title[100];
    char artist[100];
    char album[100];
    char year[5];
};

struct MusicLibrary {
    struct Song songs[MAX_SONGS];
    int songCount;
};

void loadLibrary(struct MusicLibrary *musicLibrary, const char *filePath) {
    FILE *file = fopen(filePath, "r");
    if (file != NULL) {
        fscanf(file, "%s", musicLibrary->songs[0].title);
        printf("Library loaded.\n");
        fclose(file);
    } else {
        printf("No library found. Creating a new one.\n");
    }
}

void saveLibrary(const struct MusicLibrary *musicLibrary, const char *filePath) {
    FILE *file = fopen(filePath, "w");
    if (file != NULL) {
        fprintf(file, "%s", musicLibrary->songs[0].title);
        printf("Library saved.\n");
        fclose(file);
    }
}

void addSong(struct MusicLibrary *musicLibrary) {
    struct Song song;
    printf("Enter Song Information:\n");
    printf("Title: ");
    scanf("%s", song.title);
    printf("Artist: ");
    scanf("%s", song.artist);
    printf("Album: ");
    scanf("%s", song.album);
    printf("Year: ");
    scanf("%s", song.year);

    if (musicLibrary->songCount < MAX_SONGS) {
        musicLibrary->songs[musicLibrary->songCount++] = song;
        printf("Song added.\n");
    } else {
        printf("Maximum song limit reached.\n");
    }
}

void editSong(struct MusicLibrary *musicLibrary) {
    char editTitle[100], field[100], newValue[100];
    printf("Enter Title of the Song to Edit: ");
    scanf("%s", editTitle);

    for (int i = 0; i < musicLibrary->songCount; ++i) {
        if (strcmp(musicLibrary->songs[i].title, editTitle) == 0) {
            printf("Enter Field to Edit (title/artist/album/year): ");
            scanf("%s", field);
            printf("Enter New Value: ");
            scanf("%s", newValue);

            if (strcmp(field, "title") == 0) {
                strcpy(musicLibrary->songs[i].title, newValue);
            } else if (strcmp(field, "artist") == 0) {
                strcpy(musicLibrary->songs[i].artist, newValue);
            } else if (strcmp(field, "album") == 0) {
                strcpy(musicLibrary->songs[i].album, newValue);
            } else if (strcmp(field, "year") == 0) {
                strcpy(musicLibrary->songs[i].year, newValue);
            }

            printf("Song info updated.\n");
            return;
        }
    }
    printf("Song not found.\n");
}

void deleteSong(struct MusicLibrary *musicLibrary) {
    char deleteTitle[100];
    printf("Enter Title of the Song to Delete: ");
    scanf("%s", deleteTitle);

    for (int i = 0; i < musicLibrary->songCount; ++i) {
        if (strcmp(musicLibrary->songs[i].title, deleteTitle) == 0) {
            for (int j = i; j < musicLibrary->songCount - 1; ++j) {
                musicLibrary->songs[j] = musicLibrary->songs[j + 1];
            }
            --musicLibrary->songCount;
            printf("Song deleted.\n");
            return;
        }
    }
    printf("Song not found.\n");
}

void searchLibrary(const struct MusicLibrary *musicLibrary) {
    char query[100];
    printf("Enter Search Term: ");
    scanf("%s", query);

    int found = 0;
    printf("Search results:\n");
    for (int i = 0; i < musicLibrary->songCount; ++i) {
        if (strstr(musicLibrary->songs[i].title, query) != NULL) {
            printf("Title: %s, Artist: %s, Album: %s, Year: %s\n",
                   musicLibrary->songs[i].title,
                   musicLibrary->songs[i].artist,
                   musicLibrary->songs[i].album,
                   musicLibrary->songs[i].year);
            found = 1;
        }
    }

    if (!found) {
        printf("No results found.\n");
    }
}

int main() {
    struct MusicLibrary musicLib;
    musicLib.songCount = 0;
    const char *filePath = "music_lib.txt";

    while (1) {
        printf("\n=== Music Library Management ===\n");
        printf("1. Load Library\n");
        printf("2. Save Library\n");
        printf("3. Add Song\n");
        printf("4. Edit Song Info\n");
        printf("5. Delete Song\n");
        printf("6. Search Library\n");
        printf("7. Exit\n");

        int choice;
        printf("Select an option (1-7): ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                loadLibrary(&musicLib, filePath);
                break;
            case 2:
                saveLibrary(&musicLib, filePath);
                break;
            case 3:
                addSong(&musicLib);
                break;
            case 4:
                editSong(&musicLib);
                break;
            case 5:
                deleteSong(&musicLib);
                break;
            case 6:
                searchLibrary(&musicLib);
                break;
            case 7:
                printf("Exiting program.\n");
                return 0;
            default:
                printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}
